"use client"

import { createContext, useContext, useState, type ReactNode } from "react"

type Language = "fr" | "en" | "ru"

interface LanguageContextType {
  language: Language
  setLanguage: (lang: Language) => void
  t: (key: string) => string
}

const translations = {
  fr: {
    "mari.title": "Mari the queen",
    "mari.subtitle": "for the love of my life",
    "mari.days": "√ßa fait *** que tu es ma copine üéâ",
    "coming.title": "Come back later le sang",
    "coming.subtitle": "–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ, –º–æ–∂–µ—Ç, —Ç–µ–±—è —Ç—É—Ç –∂–¥—ë—Ç —Å—é—Ä–ø—Ä–∏–∑‚Ä¶",
    "coming.button": "you : üòæ",
    "song.title": "Notre Chanson",
    "song.description": "La m√©lodie de nos c≈ìurs...",
    "song.fallback": "Ton navigateur ne supporte pas l'√©l√©ment audio.",
  },
  en: {
    "mari.title": "Mari the queen",
    "mari.subtitle": "for the love of my life",
    "mari.days": "it's been *** since ur my girlfriend üéâ",
    "coming.title": "Come back later bro",
    "coming.subtitle": "Come back later, maybe there's a surprise waiting for you‚Ä¶",
    "coming.button": "you : üòæ",
    "song.title": "Our Song",
    "song.description": "The melody of our hearts...",
    "song.fallback": "Your browser does not support the audio element.",
  },
  ru: {
    "mari.title": "–ú–∞—Ä–∏ –∫–æ—Ä–æ–ª–µ–≤–∞",
    "mari.subtitle": "–¥–ª—è –ª—é–±–≤–∏ –≤—Å–µ–π –º–æ–µ–π –∂–∏–∑–Ω–∏",
    "mari.days": "–ø—Ä–æ—à–ª–æ *** —Å —Ç–µ—Ö –ø–æ—Ä, –∫–∞–∫ —Ç—ã –º–æ—è –¥–µ–≤—É—à–∫–∞ üéâ",
    "coming.title": "–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ –±—Ä–∞—Ç–∞–Ω",
    "coming.subtitle": "–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ, –º–æ–∂–µ—Ç, —Ç–µ–±—è —Ç—É—Ç –∂–¥—ë—Ç —Å—é—Ä–ø—Ä–∏–∑‚Ä¶",
    "coming.button": "—Ç—ã : üòæ",
    "song.title": "–ù–∞—à–∞ –ü–µ—Å–Ω—è",
    "song.description": "–ú–µ–ª–æ–¥–∏—è –Ω–∞—à–∏—Ö —Å–µ—Ä–¥–µ—Ü...",
    "song.fallback": "–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç.",
  },
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined)

export function LanguageProvider({ children }: { children: ReactNode }) {
  const [language, setLanguage] = useState<Language>("fr") // Default to French

  // La fonction 't' simple et efficace
  const t = (key: string): string => {
    const langTranslations = translations[language]
    // @ts-ignore
    return langTranslations[key] || key
  }

  return <LanguageContext.Provider value={{ language, setLanguage, t }}>{children}</LanguageContext.Provider>
}

export function useLanguage() {
  const context = useContext(LanguageContext)
  if (context === undefined) {
    throw new Error("useLanguage must be used within a LanguageProvider")
  }
  return context
}
