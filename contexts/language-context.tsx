"use client"

import { createContext, useContext, useState, type ReactNode } from "react"
import type { Language, Translations } from "@/types/app-types"

interface LanguageContextType {
  language: Language
  setLanguage: (lang: Language) => void
  t: (key: string) => string
}

const translations: Translations = {
  fr: {
    "mari.title": "Mari the queen",
    "mari.subtitle": "for the love of my life",
    "mari.days": "√ßa fait *** que tu es ma copine üéâ",
    "coming.title": "Come back later le sang",
    "coming.subtitle": "–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ, –º–æ–∂–µ—Ç, —Ç–µ–±—è —Ç—É—Ç –∂–¥—ë—Ç —Å—é—Ä–ø—Ä–∏–∑‚Ä¶",
    "coming.button": "you : üòæ",
    "time.paris": "Heure de Paris",
    "time.busan": "Heure de Busan",
    "meeting.title": "PROCHAINE RENCONTRE",
    "meeting.date": "20 Juillet 2025",
    "meeting.days": "JOURS",
    "meeting.hours": "HEURES",
    "meeting.minutes": "MIN",
    "meeting.seconds": "SEC",
    "goals.title": "Goals Tracker",
  },
  en: {
    "mari.title": "Mari the queen",
    "mari.subtitle": "for the love of my life",
    "mari.days": "it's been *** since ur my girlfriend üéâ",
    "coming.title": "Come back later bro",
    "coming.subtitle": "Come back later, maybe there's a surprise waiting for you‚Ä¶",
    "coming.button": "you : üòæ",
    "time.paris": "Paris Time",
    "time.busan": "Busan Time",
    "meeting.title": "NEXT MEETING",
    "meeting.date": "July 20th, 2025",
    "meeting.days": "DAYS",
    "meeting.hours": "HOURS",
    "meeting.minutes": "MIN",
    "meeting.seconds": "SEC",
    "goals.title": "Goals Tracker",
  },
  ru: {
    "mari.title": "–ú–∞—Ä–∏ –∫–æ—Ä–æ–ª–µ–≤–∞",
    "mari.subtitle": "–¥–ª—è –ª—é–±–≤–∏ –≤—Å–µ–π –º–æ–µ–π –∂–∏–∑–Ω–∏",
    "mari.days": "–ø—Ä–æ—à–ª–æ *** —Å —Ç–µ—Ö –ø–æ—Ä, –∫–∞–∫ —Ç—ã –º–æ—è –¥–µ–≤—É—à–∫–∞ üéâ",
    "coming.title": "–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ –±—Ä–∞—Ç–∞–Ω",
    "coming.subtitle": "–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ, –º–æ–∂–µ—Ç, —Ç–µ–±—è —Ç—É—Ç –∂–¥—ë—Ç —Å—é—Ä–ø—Ä–∏–∑‚Ä¶",
    "coming.button": "—Ç—ã : üòæ",
    "time.paris": "–í—Ä–µ–º—è –≤ –ü–∞—Ä–∏–∂–µ",
    "time.busan": "–í—Ä–µ–º—è –≤ –ü—É—Å–∞–Ω–µ",
    "meeting.title": "–°–õ–ï–î–£–Æ–©–ê–Ø –í–°–¢–†–ï–ß–ê",
    "meeting.date": "20 –∏—é–ª—è 2025",
    "meeting.days": "–î–ù–ò",
    "meeting.hours": "–ß–ê–°–´",
    "meeting.minutes": "–ú–ò–ù",
    "meeting.seconds": "–°–ï–ö",
    "goals.title": "–¢—Ä–µ–∫–µ—Ä –¶–µ–ª–µ–π",
  },
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined)

export function LanguageProvider({ children }: { children: ReactNode }) {
  const [language, setLanguage] = useState<Language>("en") // Chang√© de "fr" √† "en" pour l'anglais par d√©faut

  // La fonction 't' simple et efficace
  const t = (key: string): string => {
    const langTranslations = translations[language]
    return langTranslations[key] || key
  }

  return <LanguageContext.Provider value={{ language, setLanguage, t }}>{children}</LanguageContext.Provider>
}

export function useLanguage() {
  const context = useContext(LanguageContext)
  if (context === undefined) {
    throw new Error("useLanguage must be used within a LanguageProvider")
  }
  return context
}
